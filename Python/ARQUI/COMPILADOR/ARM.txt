					
					;		Almacenar datos en memoria
					mov		r0, #0x20000000    ; posicion inicial de la memoria de datos
					mov		r1, #65		    ; primer caracter [A]
					str		r1, [r0]           ; almacenar caracter
					mov		r1, #68            ; D
					str		r1, [r0, #4]
					
					;		Code
					mov		r4, #0	; c  -> contador ciclo_principal
					mov		r2, #0 	; offset
					
for_principal
					cmp		r4, #2
					beq		fin
					
					mov		r0, #0    ; r0 -> dx -> coords
					mov		r1, #0    ; r1 -> dy
					;		r2
					mov		r3, #0	; resultDraw
					;		r4
					mov		r5, #1    ; plot 1
					mov		r6, #0    ; temp
					mov		r7, #0    ; x0  -> rango
					mov		r8, #0	; y0  -> y
					mov		r9, #0    ; x1  -> x
					mov		r10, #0   ; y1  -> D
					mov		r11, #0   ; variable
					mov		r12, #0   ; r12 -> eval
					mov		r13, #0   ; yi
					mov		r14, #0   ; r14 -> dif
					;		llamar el metodo dibujar linea
					b		draw
					
retorno_for_principal
					mov		r0, #0x1000 ; posicion inicial donde se escribe los resultados
					lsl		r7, r2, #2
					str		r3, [r0, r7]
					add		r2, r2, #1  ; aumenta posicion de memoria de datos
					add		r4, r4, #1  ; aumenta el contador
					b		for_principal
					
draw
					mov		r0, #0x20000000 ; posicion inicial de la memoria de datos
					lsl		r7, r4, #2
					ldr		r12, [r0, r7]
					cmp		r12, #65  ; A
					beq		dibujaA
					cmp		r12, #68  ; D
					beq		dibujaD
					
					;		Metodo Bresenham (plotLine)
dibujaA
					cmp		r5, #1    ;		plot 1
					beq		dibujaA_1
					cmp		r5, #2    ;		plot 2
					beq		dibujaA_2
					cmp		r5, #3    ;		plot 3
					beq		dibujaA_3
					cmp		r5, #4    ;		plot 4
					beq		dibujaA_4
					b		retorno_for_principal
					
dibujaA_1
					mov		r7, #0
					mov		r8, #0
					mov		r9, #4
					mov		r10, #0
					b		plotLine
					
dibujaA_2
					mov		r7, #0
					mov		r8, #3
					mov		r9, #4
					mov		r10, #3
					b		plotLine
					
dibujaA_3
					mov		r7, #0
					mov		r8, #0
					mov		r9, #0
					mov		r10, #4
					b		plotLine
					
dibujaA_4
					mov		r7, #4         ; x0
					mov		r8, #0		; y0
					mov		r9, #4         ; x1
					mov		r10, #4        ; y1
					b		plotLine
					
					
dibujaD
					cmp		r5, #1    ;		plot 1
					beq		dibujaD_1
					cmp		r5, #2    ;		plot 2
					beq		dibujaD_2
					cmp		r5, #3    ;		plot 3
					beq		dibujaD_3
					cmp		r5, #4    ;		plot 4
					beq		dibujaD_4
					b		retorno_for_principal
					
dibujaD_1
					mov		r7, #0
					mov		r8, #0
					mov		r9, #0
					mov		r10, #4
					b		plotLine
					
dibujaD_2
					mov		r7, #4
					mov		r8, #1
					mov		r9, #4
					mov		r10, #3
					b		plotLine
					
dibujaD_3
					mov		r7, #0
					mov		r8, #0
					mov		r9, #4
					mov		r10, #1
					b		plotLine
					
dibujaD_4
					mov		r7, #0         ; x0
					mov		r8, #4		; y0
					mov		r9, #4         ; x1
					mov		r10, #3        ; y1
					b		plotLine
					
plotLine
					sub		r12, r9, r7  ; eval
					;		absoluto
					cmp		r12, #0
					ble		else_0
					mov		r12, r12    ; return x (eval)
					b		fin_if_0
					
else_0
					mov		r11, #0
					sub		r12, r11, r12   ; return -x (-eval)
					
fin_if_0
					sub		r6, r10, r8 ; tmp
					;		absoluto
					cmp		r6, #0
					ble		else_1
					mov		r6, r6    ; return x (eval)
					b		fin_if_1
					
else_1
					mov		r11, #0
					sub		r6, r11, r6   ; return -x (-eval)
					
fin_if_1
					cmp		r12, r6      ; eval > tmp
					ble		else_2
					mov		r12, #1
					b		fin_if_2
					
else_2
					mov		r12, #0
					
fin_if_2
					cmp		r12, #1     ; not eval
					beq		else_3
					mov		r6, r7
					mov		r7, r8
					mov		r8, r6
					mov		r6, r9
					mov		r9, r10
					mov		r10, r6
					
else_3
					sub		r0, r9, r7    ; dx
					sub		r1, r10, r8   ; dy
					mov		r13, #1       ; yi
					
					cmp		r1, #0       ; dy < 0
					bge		else_4
					mov		r13, #-1
					mov		r11, #0
					sub		r1, r11, r1   ; -dy
					
else_4
					sub		r14, r1, r0   ; dif
					add		r10, r1, r14  ; y1 por D
					mov		r8, r8        ; y = y0
					
					;		for_plotLine
					;add		r7, r7, r9    ; x0 por rango
					;add		r7, r7, #1
					;mov		r9, #0        ; x1 por x -> contador for_plotLine
					
					mov		r11, r9       ; duplicar x1
					mov		r9, r7        ; x -> contador for_plotLine
					sub		r7, r11, r7   ; rango
					add		r7, r7, #1
					
for_plotLine
					cmp		r9, r7
					beq		fin_for_plotLine
					
					cmp		r12, #0      ; eval == 0
					beq		else_5
					mov		r11, #1
					lsl		r0, r11, r9
					mov		r6, r8
					lsl		r6, r6, #2
					add		r6, r6, r8
					lsl		r0, r0, r6
					b		fin_if_5
					
else_5
					mov		r11, #1
					lsl		r0, r11, r8
					mov		r6, r9
					lsl		r6, r6, #2
					add		r6, r6, r9
					lsl		r0, r0, r6
					
fin_if_5
					orr		r3, r3, r0
					
					cmp		r10, #0
					ble		else_6
					add		r8, r13, r8
					add		r10, r10, r14
					add		r10, r10, r14
					b		fin_if_6
					
else_6
					add		r10, r10, r1
					add		r10, r10, r1
					
fin_if_6
					add		r9, r9, #1
					b		for_plotLine
					
fin_for_plotLine
					add		r5, r5, #1
					b		draw
					
fin
					end		; end of the program
					
					
